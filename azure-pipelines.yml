# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

jobs:
- job: formatting_check
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.7'
      addToPath: true
  - checkout: self
    submodules: recursive
  - script: python -m pip install --upgrade pip cpplint pylint numpy scipy
    displayName: 'Installing pylint and cpplint...'
  - script: make lint
    displayName: 'Running pylint and cpplint...'
- job: linux_build
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - checkout: self
    submodules: recursive
  - script: tests/ci_build/ci_build.sh cpu tests/ci_build/build_via_cmake.sh -DENABLE_PROTOBUF=ON
    displayName: 'Building Treelite...'
  - script: |
      rm -rfv python/dist python/build
      tests/ci_build/ci_build.sh cpu bash -c "cd python/ && python setup.py bdist_wheel --universal"
    displayName: 'Packaging Python wheel for Treelite...'
  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'python_linux_whl'
      targetPath: 'python/dist/'
- job: osx_build
  pool:
    vmImage: 'macOS-10.13'
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.7'
      addToPath: true
  - checkout: self
    submodules: recursive
  - script: |
      rm -rf build/
      mkdir build
      cd build
      cmake .. -DENABLE_PROTOBUF=ON
      make -j
    displayName: 'Building Treelite...'
  - script: |
      rm -rfv python/dist python/build
      cd python/
      pip install wheel setuptools
      python setup.py bdist_wheel --universal
    displayName: 'Packaging Python wheel for Treelite...'
  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'python_osx_whl'
      targetPath: 'python/dist/'
- job: cpp_coverage
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.7'
      addToPath: true
  - checkout: self
    submodules: recursive
  - script: |
      rm -rfv build/
      mkdir build/
      cd build/
      cmake .. -DTEST_COVERAGE=ON -DENABLE_PROTOBUF=ON -DCMAKE_BUILD_TYPE=Debug
      make -j
    displayName: 'Building Treelite...'
  - script: python -m pip install numpy scipy pandas pytest scikit-learn xgboost lightgbm
    displayName: 'Setting up Python environment...'
  - script: PYTHONPATH=./python python -m pytest -v --fulltrace tests/python
    displayName: 'Running integration tests...'
  - script: |
      lcov --directory . --capture --output-file coverage.info
      lcov --remove coverage.info '/usr/*' --output-file coverage.info
      lcov --remove coverage.info '*3rdparty*' --output-file coverage.info
      lcov --remove coverage.info '*dmlc-core*' --output-file coverage.info
    displayName: 'Collecting C++ code coverage...'
  - script: bash <(curl -s https://codecov.io/bash) || echo "Codecov did not collect coverage reports"
    displayName: 'Submitting C++ code coverage data to CodeCov...'
    env:
      CODECOV_TOKEN: $(CodeCovToken)
- job: linux_python_test
  dependsOn: linux_build
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.7'
      addToPath: true
  - checkout: self
    submodules: recursive
  - script: python -m pip install numpy scipy pandas pytest pytest-cov scikit-learn xgboost lightgbm coverage codecov
    displayName: 'Setting up Python environment...'
  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'python_linux_whl'
      targetPath: $(System.DefaultWorkingDirectory)
    displayName: 'Downloading Treelite Python wheel for Linux...'
  - script: python -m pip install *.whl
    displayName: 'Installing Treelite into Python environment...'
  - script: python -m pytest -v --fulltrace tests/python --cov=./
    displayName: 'Running Python tests...'
  - script: python -m codecov --required
    displayName: 'Submitting code coverage data to CodeCov...'
    env:
      CODECOV_TOKEN: $(CodeCovToken)
- job: osx_python_test
  dependsOn: osx_build
  pool:
    vmImage: 'macOS-10.13'
  variables:
    GCC_PATH: gcc-7
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.7'
      addToPath: true
  - checkout: self
    submodules: recursive
  - script: |
      python -m pip install numpy scipy pandas pytest pytest-cov scikit-learn lightgbm coverage codecov
      brew install gcc@7 libomp
    displayName: 'Setting up Python environment...'
  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'python_osx_whl'
      targetPath: $(System.DefaultWorkingDirectory)
    displayName: 'Downloading Treelite Python wheel for Mac OSX...'
  - script: python -m pip install *.whl
    displayName: 'Installing Treelite into Python environment...'
  - script: python -m pytest -v --fulltrace tests/python --cov=./
    displayName: 'Running Python tests...'
  - script: python -m codecov --required
    displayName: 'Submitting code coverage data to CodeCov...'
    env:
      CODECOV_TOKEN: $(CodeCovToken)
