syntax = "proto2";

package treelite_ast_protobuf;

message ASTTree {
  optional ASTNode head = 1;
  optional int32 num_feature = 2;
  optional int32 num_output_group = 3;
  optional bool random_forest_flag = 4;
  optional bool output_vector_flag = 5;
  optional bool quantize_threshold_flag = 6;
  map<string, string> model_param = 7;  // extra parameters
}

message ASTNode {
  repeated ASTNode children = 1;
  optional int32 node_id = 2;
  optional int32 tree_id = 3;
  oneof subclasses {
    MainNode main_variant = 4;
    TranslationUnitNode translation_unit_variant = 5;
    QuantizerNode quantizer_variant = 6;
    AccumulatorContextNode accumulator_context_variant = 7;
    ConditionNode condition_variant = 8;
    OutputNode output_variant = 9;
  }
}

message MainNode {
  optional float global_bias = 1;
  optional bool average_result = 2;
  optional int32 num_tree = 3;
  optional int32 num_feature = 4;
}

message TranslationUnitNode {
  optional int32 unit_id = 1;
}

message QuantizerNode {
  repeated FeatureThresholdList cut_pts = 1;
      // cut_pts[i][k] represents the k-th threshold used for feature i
  repeated bool is_categorical = 2;
      // is_categorical[i] tells us whether feature i is categorical or not.
      // If feature i is categorical, cut_pts[i] must be an empty list
}

message AccumulatorContextNode {}

message ConditionNode {
  optional uint32 split_index = 1;
  optional bool default_left = 2;
  // Numbers of training examples whose paths cross the left and right
  // child nodes, respectively. May not be available.
  optional uint64 left_freq = 3;
  optional uint64 right_freq = 4;
  oneof subclasses {
    NumericalConditionNode numerical_variant = 5;
    CategoricalConditionNode categorical_variant = 6;
  }
}

message NumericalConditionNode {
  optional bool quantized = 1;
  optional string op = 2;  // Operation used for comparison (e.g. "<")
  /* split threshold may be a float or int, depending on field [quantized] */
  oneof threshold_variant {
    float float_threshold = 3;
    int32 int_threshold = 4;
  }
}

message CategoricalConditionNode {
  // List of all categories belonging to the left child
  repeated uint32 left_categories = 1;
}

message OutputNode {
  optional bool is_vector = 1;  // whether to output a vector or scalar
  optional float scalar = 2;  // scalar output
  repeated float vector = 3;  // vector output; zero length when unused
}

// represents an ascending list of distinct thresholds used to classify
// a particular feature
 message FeatureThresholdList {
  repeated float cut_pts = 1;
}
