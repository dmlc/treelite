trigger:
- master

jobs:
- job: formatting_check
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.7'
      addToPath: true
  - checkout: self
    submodules: recursive
  - script: python -m pip install --upgrade pip cpplint pylint numpy scipy
    displayName: 'Installing pylint and cpplint...'
  - script: make lint
    displayName: 'Running pylint and cpplint...'
- job: linux_build
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - checkout: self
    submodules: recursive
  - script: tests/ci_build/ci_build.sh cpu tests/ci_build/build_via_cmake.sh -DENABLE_PROTOBUF=ON
    displayName: 'Building Treelite...'
  - script: |
      rm -rfv python/dist python/build
      tests/ci_build/ci_build.sh cpu bash -c "cd python/ && python setup.py bdist_wheel --universal"
    displayName: 'Packaging Python wheel for Treelite...'
  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'python_linux_whl'
      targetPath: 'python/dist/'
- job: osx_build
  pool:
    vmImage: 'macOS-10.13'
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.7'
      addToPath: true
  - checkout: self
    submodules: recursive
  - script: |
      rm -rf build/
      mkdir build
      cd build
      cmake .. -DENABLE_PROTOBUF=ON
      make -j
    displayName: 'Building Treelite...'
  - script: |
      rm -rfv python/dist python/build
      cd python/
      pip install wheel setuptools
      python setup.py bdist_wheel --universal
    displayName: 'Packaging Python wheel for Treelite...'
  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'python_osx_whl'
      targetPath: 'python/dist/'
- job: win_build
  pool:
    vmImage: 'vs2015-win2012r2'
  steps:
  - checkout: self
    submodules: recursive
  - powershell: |
      (New-Object System.Net.WebClient).DownloadFile("https://repo.anaconda.com/miniconda/Miniconda3-latest-Windows-x86_64.exe", ".\Miniconda3.exe")
    displayName: 'Downloading Miniconda...'
  - script: start /wait "" Miniconda3.exe /InstallationType=JustMe /RegisterPython=0 /S /D=$(Agent.BuildDirectory)\CONDA
    displayName: 'Installing Miniconda...'
  - script: |
      call $(Agent.BuildDirectory)\CONDA\Scripts\activate
      conda install numpy scipy scikit-learn pandas
      python -m pip install wheel setuptools
    displayName: 'Setting up Python environment...'
  - script: |
      rmdir build /s /q
      mkdir build
      cd build
      cmake .. -G"Visual Studio 14 2015 Win64" -DENABLE_PROTOBUF=ON
    displayName: 'Generating Visual Studio solution...'
  - task: MSBuild@1
    inputs:
      solution: 'build/*.sln'
      msbuildArchitecture: 'x64'
      msbuildArguments: '/p:Configuration=Release /m /nodeReuse:false'
    displayName: 'Building XGBoost...'
  - script: |
      call $(Agent.BuildDirectory)\CONDA\Scripts\activate
      python setup.py bdist_wheel --universal
    displayName: 'Packaging Python wheel for Treelite...'
- job: cpp_coverage
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.7'
      addToPath: true
  - checkout: self
    submodules: recursive
  - script: sudo apt-get install lcov
    displayName: 'Installing lcov...'
  - script: |
      rm -rfv build/
      mkdir build/
      cd build/
      cmake .. -DTEST_COVERAGE=ON -DENABLE_PROTOBUF=ON -DCMAKE_BUILD_TYPE=Debug
      make -j
    displayName: 'Building Treelite...'
  - script: python -m pip install numpy scipy pandas pytest scikit-learn xgboost lightgbm
    displayName: 'Setting up Python environment...'
  - script: |
      PYTHONPATH=./python python -m pytest -v --fulltrace tests/python
      lcov --directory . --capture --output-file coverage.info
      lcov --remove coverage.info '/usr/*' --output-file coverage.info
      lcov --remove coverage.info '*3rdparty*' --output-file coverage.info
      lcov --remove coverage.info '*dmlc-core*' --output-file coverage.info
    displayName: 'Running integration tests...'
  - script: bash <(curl -s https://codecov.io/bash) || echo "Codecov did not collect coverage reports"
    displayName: 'Submitting C++ code coverage data to CodeCov...'
    env:
      CODECOV_TOKEN: $(CodeCovToken)
- job: java_coverage
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.7'
      addToPath: true
  - checkout: self
    submodules: recursive
  - script: |
      cd runtime/java/treelite4j
      mvn test -DJNI.args=cpp-coverage
    displayName: 'Running integration tests for Java runtime (treelite4j)...'
  - script: bash <(curl -s https://codecov.io/bash) || echo "Codecov did not collect coverage reports"
    displayName: 'Submitting Java code (treelite4j) coverage data to CodeCov...'
    env:
      CODECOV_TOKEN: $(CodeCovToken)
- job: linux_python_test
  dependsOn: linux_build
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.7'
      addToPath: true
  - checkout: self
    submodules: recursive
  - script: python -m pip install numpy scipy pandas pytest pytest-cov scikit-learn xgboost lightgbm coverage codecov
    displayName: 'Setting up Python environment...'
  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'python_linux_whl'
      targetPath: $(System.DefaultWorkingDirectory)
    displayName: 'Downloading Treelite Python wheel for Linux...'
  - script: |
      mkdir -p lib/
      cd lib/
      unzip -j ../*.whl 'treelite-*.data/data/treelite/libtreelite.so'
      cd ../runtime/native
      mkdir -p lib/
      cd lib/
      unzip -j ../../../*.whl 'treelite-*.data/data/treelite/libtreelite_runtime.so'
      mkdir -p ../build
      cd ../build
      cmake ..
    displayName: 'Installing Treelite into Python environment...'
  - script: python -m pytest -v --fulltrace tests/python --cov=./
    displayName: 'Running Python tests...'
    env:
      PYTHONPATH: ./python
  - script: python -m codecov --required
    displayName: 'Submitting code coverage data to CodeCov...'
    env:
      CODECOV_TOKEN: $(CodeCovToken)
- job: osx_python_test
  dependsOn: osx_build
  pool:
    vmImage: 'macOS-10.13'
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.7'
      addToPath: true
  - checkout: self
    submodules: recursive
  - script: |
      python -m pip install numpy scipy pandas pytest pytest-cov scikit-learn lightgbm coverage codecov
      brew install gcc@7 libomp
    displayName: 'Setting up Python environment...'
  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'python_osx_whl'
      targetPath: $(System.DefaultWorkingDirectory)
    displayName: 'Downloading Treelite Python wheel for Mac OSX...'
  - script: |
      mkdir -p lib/
      cd lib/
      unzip -j ../*.whl 'treelite-*.data/data/treelite/libtreelite.dylib'
      cd ../runtime/native
      mkdir -p lib/
      cd lib/
      unzip -j ../../../*.whl 'treelite-*.data/data/treelite/libtreelite_runtime.dylib'
      mkdir -p ../build
      cd ../build
      cmake ..
    displayName: 'Installing Treelite into Python environment...'
  - script: python -m pytest -v --fulltrace tests/python --cov=./
    displayName: 'Running Python tests...'
    env:
      GCC_PATH: gcc-7
      PYTHONPATH: ./python
  - script: python -m codecov --required
    displayName: 'Submitting code coverage data to CodeCov...'
    env:
      CODECOV_TOKEN: $(CodeCovToken)
